	import "/model/BusinessLayerArchDemo.ecore" as MM


	Graphical representation BusinessLayerDemo 
	{
		reference package businessLayer
		root  ArchimateModel
		
		Palette for ArchimateModel {
			
			Tool group ArchimatePalette {
				description "Archimate Business Palette"				
				
				Tool group PassiveStructures {
					description "Passive Structure"
				
					Creation button for class Value {
					name "Value"
					description "Value"
					icon "/imagenes/ValueIcon.gif"
					}
					Creation button for class Product {
						name "Product"
						description "Product"
						icon "/imagenes/ProductIcon.gif"
					}
					Creation button for class Contract {
						name "Contract"
						description "Contract"
						icon "/imagenes/ContractIcon.gif"
					}					
					Creation button for class Meaning {
						name "Meaning"
						description "Meaning"
						icon "/imagenes/MeaningIcon.gif"
					}
					Creation button for class Representation {
						name "Representation"
						description "Representation"
						icon "/imagenes/RepresentationIcon.gif"
					}
					Creation button for class BusinessObject {
						name "BusinessObject"
						description "BusinessObject"
						icon "/imagenes/BusinessObjectIcon.gif"
					}
					
				}
				Tool group BehaviorElements {
					description "Behavior Elements"
				
					Creation button for class BusinessService {
						name "BusinessService"
						description "BusinessService"
						icon "/imagenes/BusinessServiceIcon.gif"
					}
				/*/	Creation button for class BusinessBehaviorElement {
						name "BusinessBehaviorElement"
						description "BusinessBehaviorElement"
						icon "/imagenes/BusinessBehaviorElementIcon.gif"
					}*/
					Creation button for class BusinessProcess {
						name "BusinessProcess"
						description "BusinessProcess"
						icon "/imagenes/BusinessProcessIcon.gif"
					}
					Creation button for class BusinessFunction {
						name "BusinessFunction"
						description "BusinessFunction"
						icon "/imagenes/BusinessFunctionIcon.gif"
					}
					Creation button for class BusinessInteraction {
						name "BusinessInteraction"
						description "BusinessInteraction"
						icon "/imagenes/BusinessInteractionIcon.gif"
					}
					Creation button for class BusinessEvent {
						name "BusinessEvent"
						description "BusinessEvent"
						icon "/imagenes/BusinessEventIcon.gif"
					}
				}
				
				Tool group ActiveStructures {
						description "Active Structure"
					
					Creation button for class Location {
						name "Location"
						description "Location"
						icon "/imagenes/LocationIcon.gif"
					}
					Creation button for class BusinessInterface {
						name "BusinessInterface"
						description "BusinessInterface"
						icon "/imagenes/BusinessInterfaceIcon.gif"
					}
					Creation button for class BusinessRole {
						name "BusinessRole"
						description "BusinessRole"
						icon "/imagenes/BusinessRoleIcon.gif"
					}
					Creation button for class BusinessCollaboration {
						name "BusinessCollaboration"
						description "BusinessCollaboration"
						icon "/imagenes/BusinessCollaborationIcon.gif"
					}
					Creation button for class BusinessActor {
						name "BusinessActor"
						description "BusinessActor"
						icon "/images/actor.gif"
					}
				}
			}
		}	
		Style definition {
			Color black (0, 0, 0)			
			Color white (255, 255, 255)			
			Color yellow (255, 255, 0)			
			Color blue (0, 0, 255)			
			Color red (255, 0, 0)			
			Color green (0, 255, 0)			
			Line style BorderBlack1 {
				width 1
				type dot
				color black
			}
			Rounded rectRounded10 
			{
				radiox 10
				radioy 10
			}
			Ellipse ellip {
				proportion ( 22, 17)
			}
			
			Line style BorderBlack3 {
				width 3
				type solid
				color black
			}

			Line style BorderBlack4 {
				width 4
				type solid
				color black
			}

			Line style BorderRed2 {
				width 2
				type solid
				color red
			}
			
			Regular polygon deca {
				vertex quantity 8
				start angle 90
			}
			
			Color Withe (255, 255, 255)			
		/*	Color BusinessColor (117, 235, 235)						
			Color BusinessColor (116, 232, 116)		*/	
			Color BusinessColor (241, 241, 181)			
			Color greenTestXX (44, 255, 45)
			
			Line style BorderBlackDot {
				width 1
				type dot
				color black
			}
			Line style BorderRedDot {
				width 4
				type dot
				color red
			}
			Line style BorderBlack2 {
				width 2
				type solid
				color black
			}
			Line style BorderBusinessColor{
				width 3
				type solid
				color BusinessColor
			}
		}

		Graphical definition {
			Node_element ValueDef for class Value {
				label elementName
				label icon false
				label placement external
				size (45, 35)
				Regular figure extends ellip {
					background color BusinessColor
					border BorderBlack2
					/*icon path "images/role.gif"
					icon size ( 25 , 25)
					icon position Point (45, 4)*/
				}
				phantom true
			}
			Node_line composedOfValueValueDef for reference Value.composedOfValueValue {
				label "composedOf"
				style BorderBlack1
				source decoration filled rhomb
				target decoration arrow
			}
			Node_line composesValueValueDef for reference Value.composesValueValue {
				label "composes"
				style BorderBlack1
				source decoration arrow
				target decoration filled rhomb
			}
			Node_line aggregatesValueValueDef for reference Value.aggregatesValueValue {
				label "aggregates"
				style BorderBlack1
				source decoration rhomb
				target decoration arrow
			}
			Node_line aggregatedByValueValueDef for reference Value.aggregatedByValueValue {
				label "aggregatedBy"
				style BorderBlack1
				source decoration arrow
				target decoration rhomb
			}
			Node_line associatedWithProductValueDef for reference Value.associatedWithProductValue {
				label "associatedWith"
				style BorderBlack1
				source decoration none
				target decoration none
			}
			Node_element ProductDef for class Product {
				label elementName
				label icon false
				label placement internal
				size (60, 50)
				Regular figure extends rectRounded10 {
					background color BusinessColor
					border BorderBlack2
					icon path "Product.gif"
					icon size ( 30 , 30)
					icon position Point (28, 15)
				}

				phantom true
			}
			Node_line composedOfProductProductDef for reference Product.composedOfProductProduct {
				label "composedOf"
				style BorderBlack1
				source decoration filled rhomb
				target decoration arrow
			}
			
			Node_line composesProductProductDef for reference Product.composesProductProduct {
				label "composes"
				style BorderBlack1
				source decoration arrow
				target decoration filled rhomb
			}
			Node_line aggregatesProductProductDef for reference Product.aggregatesProductProduct {
				label "aggregates"
				style BorderBlack1
				source decoration rhomb
				target decoration arrow
			}
			Node_line aggregatedByProductProductDef for reference Product.aggregatedByProductProduct {
				label "aggregatedBy"
				style BorderBlack1
				source decoration arrow
				target decoration rhomb
			}
			Node_line associatedWithValueProductDef for reference Product.associatedWithValueProduct {
				label "associatedWith"
				style BorderBlack1
				source decoration none
				target decoration none
			}
			Node_line aggregatesContractProductDef for reference Product.aggregatesContractProduct {
				label "aggregates"
				style BorderBlack1
				source decoration rhomb
				target decoration arrow
			}
			Node_line aggregatesBusinessServiceProductDef for reference Product.aggregatesBusinessServiceProduct {
				label "aggregates"
				style BorderBlack1
				source decoration rhomb
				target decoration arrow
			}
			Node_element MeaningDef for class Meaning {
				label elementName
				label icon false
				label placement internal
				size (70, 50)
				Regular figure extends rectRounded10 {
					background color BusinessColor
					border BorderBlack2
					icon path "meaning.gif"
					icon size ( 30 , 30)
					icon position Point (40, 14)
				}

				phantom true
			}
			Node_line composedOfMeaningMeaningDef for reference Meaning.composedOfMeaningMeaning {
				label "composedOf"
				style BorderBlack1
				source decoration filled rhomb
				target decoration arrow
			}
			Node_line composesMeaningMeaningDef for reference Meaning.composesMeaningMeaning {
				label "composes"
				style BorderBlack1
				source decoration arrow
				target decoration filled rhomb
			}
			Node_line aggregatesMeaningMeaningDef for reference Meaning.aggregatesMeaningMeaning {
				label "aggregates"
				style BorderBlack1
				source decoration rhomb
				target decoration arrow
			}
			Node_line aggregatedByMeaningMeaningDef for reference Meaning.aggregatedByMeaningMeaning {
				label "aggregatedBy"
				style BorderBlack1
				source decoration arrow
				target decoration rhomb
			}
			Node_line associatedWithBusinessObjectMeaningDef for reference Meaning.associatedWithBusinessObjectMeaning {
				label "associatedWith"
				style BorderBlack1
				source decoration none
				target decoration none
			}
			Node_element RepresentationDef for class Representation {
				label elementName
				label icon false
				label placement internal
				size (70, 50)
				Regular figure extends rectRounded10 {
					background color BusinessColor
					border BorderBlack2
				icon path "representation.gif"
					icon size ( 25 , 25)
					icon position Point (42, 15)
				}

				phantom true
			}
			Node_line composedOfRepresentationRepresentationDef for reference Representation.composedOfRepresentationRepresentation {
				label "composedOf"
				style BorderBlack1
				source decoration filled rhomb
				target decoration arrow
			}
			Node_line composesRepresentationRepresentationDef for reference Representation.composesRepresentationRepresentation {
				label "composes"
				style BorderBlack1
				source decoration arrow
				target decoration filled rhomb
			}
			Node_line aggregatesRepresentationRepresentationDef for reference Representation.aggregatesRepresentationRepresentation {
				label "aggregates"
				style BorderBlack1
				source decoration rhomb
				target decoration arrow
			}
			Node_line aggregatedByRepresentationRepresentationDef for reference Representation.aggregatedByRepresentationRepresentation {
				label "aggregatedBy"
				style BorderBlack1
				source decoration arrow
				target decoration rhomb
			}
			Node_line realizesBusinessObjectRepresentationDef for reference Representation.realizesBusinessObjectRepresentation {
				label "realizes"
				style BorderBlack1
				source decoration none
				target decoration none
			}
			Node_line assignedToLocationRepresentationDef for reference Representation.assignedToLocationRepresentation {
				label "assignedTo"
				style BorderBlack1
				source decoration none
				target decoration none
			}
			Node_element BusinessObjectDef for class BusinessObject {
				label elementName
				label icon false
				label placement internal
				size (50, 50)
				Regular figure extends rectRounded10 {
					background color BusinessColor
					border BorderBlack2
					/*icon path "images/representation.gif"
					icon size ( 25 , 25)
					icon position Point (45, 4)*/
				}
				phantom true
			}
			Node_line composedOfBusinessObjectBusinessObjectDef for reference BusinessObject.composedOfBusinessObjectBusinessObject {
				label "composedOf"
				style BorderBlack1
				source decoration filled rhomb
				target decoration arrow
			}
			Node_line composesBusinessObjectBusinessObjectDef for reference BusinessObject.composesBusinessObjectBusinessObject {
				label "composes"
				style BorderBlack1
				source decoration arrow
				target decoration filled rhomb
			}
			Node_line aggregatesBusinessObjectBusinessObjectDef for reference BusinessObject.aggregatesBusinessObjectBusinessObject {
				label "aggregates"
				style BorderBlack1
				source decoration rhomb
				target decoration arrow
			}
			Node_line aggregatedByBusinessObjectBusinessObjectDef for reference BusinessObject.aggregatedByBusinessObjectBusinessObject {
				label "aggregatedBy"
				style BorderBlack1
				source decoration arrow
				target decoration rhomb
			}
			Node_line associatedWithMeaningBusinessObjectDef for reference BusinessObject.associatedWithMeaningBusinessObject {
				label "associatedWith"
				style BorderBlack1
				source decoration none
				target decoration none
			}
			Node_line realizedByRepresentationBusinessObjectDef for reference BusinessObject.realizedByRepresentationBusinessObject {
				label "realizedBy"
				style BorderBlackDot
				source decoration closed arrow
				target decoration none
			}
			Node_line accessedByBusinessBehaviorElementBusinessObjectDef for reference BusinessObject.accessedByBusinessBehaviorElementBusinessObject {
				label "accessedBy"
				style BorderBlackDot
				source decoration none
				target decoration none
			}
			Node_line accessesBusinessEventBusinessObjectDef for reference BusinessObject.accessesBusinessEventBusinessObject {
				label "accesses"
				style BorderBlackDot
				source decoration none
				target decoration none
			}
			Node_line accessedByBusinessServiceBusinessObjectDef for reference BusinessObject.accessedByBusinessServiceBusinessObject {
				label "accessedBy"
				style BorderBlackDot
				source decoration none
				target decoration none
			}
			Node_line assignedToLocationBusinessObjectDef for reference BusinessObject.assignedToLocationBusinessObject {
				label "assignedTo"
				style BorderBlack1
				source decoration none
				target decoration none
			}
			Node_element ContractDef for class Contract {
				label elementName
				label icon false
				label placement internal
				size (60, 60)
				Regular figure extends rectRounded10 {
					background color BusinessColor
					border BorderBlack2
					icon path "Contract.gif"
					icon size ( 30 , 30)
					icon position Point (30, 15)
				}

				phantom true
			}
			Node_line composedOfContractContractDef for reference Contract.composedOfContractContract {
				label "composedOf"
				style BorderBlack1
				source decoration filled rhomb
				target decoration arrow
			}
			Node_line composesContractContractDef for reference Contract.composesContractContract {
				label "composes"
				style BorderBlack1
				source decoration arrow
				target decoration filled rhomb
			}
			Node_line aggregatesContractContractDef for reference Contract.aggregatesContractContract {
				label "aggregates"
				style BorderBlack1
				source decoration rhomb
				target decoration arrow
			}
			Node_line aggregatedByContractContractDef for reference Contract.aggregatedByContractContract {
				label "aggregatedBy"
				style BorderBlack1
				source decoration arrow
				target decoration rhomb
			}
			Node_line aggregatedByProductContractDef for reference Contract.aggregatedByProductContract {
				label "aggregatedBy"
				style BorderBlack1
				source decoration arrow
				target decoration rhomb
			}
			Node_element BusinessServiceDef for class BusinessService {
				label elementName
				label icon false
				label placement internal
				size (60, 30)
				Regular figure extends rectRounded10 {
					background color BusinessColor
					border BorderBusinessColor				
				}
				phantom true
			}
			Node_line composedOfBusinessServiceBusinessServiceDef for reference BusinessService.composedOfBusinessServiceBusinessService {
				label "composedOf"
				style BorderBlack1
				source decoration filled rhomb
				target decoration arrow
			}
			Node_line composesBusinessServiceBusinessServiceDef for reference BusinessService.composesBusinessServiceBusinessService {
				label "composes"
				style BorderBlack1
				source decoration arrow
				target decoration filled rhomb
			}
			Node_line aggregatesBusinessServiceBusinessServiceDef for reference BusinessService.aggregatesBusinessServiceBusinessService {
				label "aggregates"
				style BorderBlack1
				source decoration rhomb
				target decoration arrow
			}
			Node_line aggregatedByBusinessServiceBusinessServiceDef for reference BusinessService.aggregatedByBusinessServiceBusinessService {
				label "aggregatedBy"
				style BorderBlack1
				source decoration arrow
				target decoration rhomb
			}
			Node_line aggregatedByProductBusinessServiceDef for reference BusinessService.aggregatedByProductBusinessService {
				label "aggregatedBy"
				style BorderBlack1
				source decoration arrow
				target decoration rhomb
			}
			Node_line usedByBusinessActorBusinessServiceDef for reference BusinessService.usedByBusinessActorBusinessService {
				label "usedBy"
				style BorderBlack1
			source decoration none
				target decoration arrow
			}
			Node_line realizedByBusinessBehaviorElementBusinessServiceDef for reference BusinessService.realizedByBusinessBehaviorElementBusinessService {
				label "realizedBy"
				style BorderBlackDot
				source decoration closed arrow
				target decoration none
			}
			Node_line usedByBusinessBehaviorElementBusinessServiceDef for reference BusinessService.usedByBusinessBehaviorElementBusinessService {
				label "usedBy"
				style BorderBlack1
				source decoration none
				target decoration arrow
			}
			Node_line assignedToBusinessInterfaceBusinessServiceDef for reference BusinessService.assignedToBusinessInterfaceBusinessService {
				label "assignedTo"
				style BorderBlack1
				source decoration none
				target decoration none
			}
			Node_line accessesBusinessObjectBusinessServiceDef for reference BusinessService.accessesBusinessObjectBusinessService {
				label "accesses"
				style BorderBlackDot
				source decoration none
				target decoration none
			}
			Node_line usedByElementBusinessRoleBusinessServiceDef for reference BusinessService.usedByElementBusinessRoleBusinessService {
				label "usedByElement"
				style BorderBlack1
				source decoration none
				target decoration arrow
			}
			/*Node_element BusinessBehaviorElementDef for class BusinessBehaviorElement {
				label elementName
				label icon false
				label placement internal
				size (70, 50)
				Regular figure extends rectRounded10 {
					background color BusinessColor
					border BorderBlack2
				icon path "service.gif"
					icon size ( 25 , 25)
					icon position Point (45, 4)
				}

				phantom true
			}*/
			Node_line composedOfBusinessBehaviorElementBusinessBehaviorElementDef for reference BusinessBehaviorElement.composedOfBusinessBehaviorElementBusinessBehaviorElement {
				label "composedOf"
				style BorderBlack1
				source decoration filled rhomb
				target decoration arrow
			}
			Node_line composesBusinessBehaviorElementBusinessBehaviorElementDef for reference BusinessBehaviorElement.composesBusinessBehaviorElementBusinessBehaviorElement {
				label "composes"
				style BorderBlack1
				source decoration arrow
				target decoration filled rhomb
			}
			Node_line aggregatesBusinessBehaviorElementBusinessBehaviorElementDef for reference BusinessBehaviorElement.aggregatesBusinessBehaviorElementBusinessBehaviorElement {
				label "aggregates"
				style BorderBlack1
				source decoration rhomb
				target decoration arrow
			}
			Node_line aggregatedByBusinessBehaviorElementBusinessBehaviorElementDef for reference BusinessBehaviorElement.aggregatedByBusinessBehaviorElementBusinessBehaviorElement {
				label "aggregatedBy"
				style BorderBlack1
				source decoration arrow
				target decoration rhomb
			}
			Node_line triggersToBusinessBehaviorElementBusinessBehaviorElementDef for reference BusinessBehaviorElement.triggersToBusinessBehaviorElementBusinessBehaviorElement {
				label "triggersTo"
				style BorderBlack1
				source decoration none
				target decoration filled closed arrow
			}
			Node_line triggeredByBusinessBehaviorElementBusinessBehaviorElementDef for reference BusinessBehaviorElement.triggeredByBusinessBehaviorElementBusinessBehaviorElement {
				label "triggeredBy"
				style BorderBlack1
				source decoration filled closed arrow
				target decoration none
			}
			Node_line flowsFromBusinessBehaviorElementBusinessBehaviorElementDef for reference BusinessBehaviorElement.flowsFromBusinessBehaviorElementBusinessBehaviorElement {
				label "flowsFrom"
				style BorderBlackDot
				source decoration filled closed arrow
				target decoration none
			}
			Node_line flowsToBusinessBehaviorElementBusinessBehaviorElementDef for reference BusinessBehaviorElement.flowsToBusinessBehaviorElementBusinessBehaviorElement {
				label "flowsTo"
				style BorderBlackDot
				source decoration none
				target decoration filled closed arrow
			}
			Node_line realisesBusinessServiceBusinessBehaviorElementDef for reference BusinessBehaviorElement.realisesBusinessServiceBusinessBehaviorElement {
				label "realises"
				style BorderBlack1
				source decoration none
				target decoration none
			}
			Node_line triggersBusinessEventBusinessBehaviorElementDef for reference BusinessBehaviorElement.triggersBusinessEventBusinessBehaviorElement {
				label "triggers"
				style BorderBlack1
				source decoration none
				target decoration filled closed arrow
			}
			
			
			
			Node_line triggersByBusinessEventBusinessBehaviorElementDef for reference BusinessBehaviorElement.triggersByBusinessEventBusinessBehaviorElement {
				label "triggersBy"
				style BorderBlack1
				source decoration filled closed arrow
				target decoration none
			}
			Node_line accessesBusinessObjectBusinessBehaviorElementDef for reference BusinessBehaviorElement.accessesBusinessObjectBusinessBehaviorElement {
				label "accesses"
				style BorderBlackDot
				source decoration none
				target decoration none
			}
			Node_line assignedToBusinessRoleBusinessBehaviorElementDef for reference BusinessBehaviorElement.assignedToBusinessRoleBusinessBehaviorElement {
				label "assignedTo"
				style BorderBlack1
				source decoration none
				target decoration none
			}
			Node_line usesBusinessServiceBusinessBehaviorElementDef for reference BusinessBehaviorElement.usesBusinessServiceBusinessBehaviorElement {
				label "uses"
				style BorderBlack1
				source decoration none
				target decoration none
			}
			
			Node_element BusinessProcessDef for class BusinessProcess {
				label elementName
				label icon false
				label placement internal
				size (70, 50)
				Regular figure extends rectRounded10 {
					background color BusinessColor
					border BorderBlack2
					icon path "Process.gif"
					icon size ( 33 , 28)
					icon position Point (20, 15)
				}
				phantom true
			}		
			Node_element BusinessProcessWarning extends BusinessProcessDef{
				Regular figure extends rectRounded10 {
					background color yellow
					border BorderBlack2
					icon path "Process.gif"
					icon size ( 33 , 28)
					icon position Point (20, 15)
				}
			}
			Node_element BusinessProcessBigwarning extends BusinessProcessDef{
				Regular figure extends rectRounded10 {
					background color red
					border BorderBlack2
					icon path "Process.gif"
					icon size ( 33 , 28)
					icon position Point (20, 15)
				}
			}
			Node_element BusinessProcessBigWhite extends BusinessProcessDef{
				Regular figure extends rectRounded10 {
					background color Withe
					border BorderBlack1
					icon path "Process.gif"
					icon size ( 33 , 28)
					icon position Point (20, 15)
				}
			}
			
			
			
			
			Node_element BusinessFunctionDef for class BusinessFunction {
				label elementName
				label icon false
				label placement internal
				size (70, 50)
					Regular figure extends rectRounded10 {
					background color BusinessColor
					border BorderBlack2
				icon path "function.gif"
					icon size ( 30 , 30)
					icon position Point (25, 15)
				}
				phantom true
			}
			
			
			Node_element BusinessInteractionDef for class BusinessInteraction {
				label elementName
				label icon false
				label placement internal
				size (70, 50)
					Regular figure extends rectRounded10 {
					background color BusinessColor
					border BorderBlack2
				icon path "Interaction.gif"
					icon size ( 30 , 30)
					icon position Point (22, 15)
				}
				phantom true
			}
			
			
			
			Node_element BusinessEventDef for class BusinessEvent {
				label elementName
				label icon false
				label placement internal
				size (70, 50)
					Regular figure extends rectRounded10 {
					background color BusinessColor
					border BorderBlack2
				icon path "Event.gif"
					icon size ( 34 , 30)
					icon position Point (25, 15)
				}
				phantom true
			}
			Node_line composedOfBusinessEventBusinessEventDef for reference BusinessEvent.composedOfBusinessEventBusinessEvent {
				label "composedOf"
				style BorderBlack1
				source decoration filled rhomb
				target decoration arrow
			}
			Node_line composesBusinessEventBusinessEventDef for reference BusinessEvent.composesBusinessEventBusinessEvent {
				label "composes"
				style BorderBlack1
				source decoration none
				target decoration none
			}
			Node_line aggregatesBusinessEventBusinessEventDef for reference BusinessEvent.aggregatesBusinessEventBusinessEvent {
				label "aggregates"
				style BorderBlack1
				source decoration rhomb
				target decoration arrow
			}
			Node_line aggregatedByBusinessEventBusinessEventDef for reference BusinessEvent.aggregatedByBusinessEventBusinessEvent {
				label "aggregatedBy"
				style BorderBlack1
				source decoration arrow
				target decoration rhomb
			}
			Node_line triggersByBusinessBehaviorElementBusinessEventDef for reference BusinessEvent.triggersByBusinessBehaviorElementBusinessEvent {
				label "triggersBy"
				style BorderBlack1
				source decoration filled closed arrow
				target decoration none
			}
			Node_line triggersBusinessBehaviorElementBusinessEventDef for reference BusinessEvent.triggersBusinessBehaviorElementBusinessEvent {
				label "triggers"
				style BorderBlack1
				source decoration none
				target decoration filled closed arrow
			}
			Node_line accessedByBusinessObjectBusinessEventDef for reference BusinessEvent.accessedByBusinessObjectBusinessEvent {
				label "accessedBy"
				style BorderBlackDot
				source decoration none
				target decoration none
			}
			Node_element LocationDef for class Location {
				label elementName
				label icon false
				label placement internal
				size (70, 50)
					Regular figure extends rectRounded10 {
					background color BusinessColor
					border BorderBlack2 
				icon path "Location.gif"
					icon size ( 30 , 30)
					icon position Point (22, 15)
				}
				phantom true
			}
			Node_line composedOfLocationLocationDef for reference Location.composedOfLocationLocation {
				label "composedOf"
				style BorderBlack1
				source decoration filled rhomb
				target decoration arrow
			}
			Node_line composesLocationLocationDef for reference Location.composesLocationLocation {
				label "composes"
				style BorderBlack1
				source decoration arrow
				target decoration filled rhomb
			}
			Node_line aggregatesLocationLocationDef for reference Location.aggregatesLocationLocation {
				label "aggregates"
				style BorderBlack1
				source decoration rhomb
				target decoration arrow
			}
			Node_line aggregatedByLocationLocationDef for reference Location.aggregatedByLocationLocation {
				label "aggregatedBy"
				style BorderBlack1
				source decoration arrow
				target decoration rhomb
			}
			Node_line assignedFromBusinessActorLocationDef for reference Location.assignedFromBusinessActorLocation {
				label "assignedFrom"
				style BorderBlack1
				source decoration none
				target decoration none
			}
			Node_line assignedFromBusinessObjectLocationDef for reference Location.assignedFromBusinessObjectLocation {
				label "assignedFrom"
				style BorderBlack1
				source decoration none
				target decoration none
			}
			Node_line assignedFromRepresentationLocationDef for reference Location.assignedFromRepresentationLocation {
				label "assignedFrom"
				style BorderBlack1
				source decoration none
				target decoration none
			}
			
			Node_element BusinessInterfaceDef for class BusinessInterface {
				label elementName
				label icon false
				label placement internal
				size (70, 50)
				Regular figure extends rectRounded10 {
					background color BusinessColor
					border BorderBlack2
				icon path "BusinessInterface.gif"
					icon size ( 30 , 30)
					icon position Point (37, 12)
				}

				phantom true
			}
			Node_line composedOfBusinessInterfaceBusinessInterfaceDef for reference BusinessInterface.composedOfBusinessInterfaceBusinessInterface {
				label "composedOf"
				style BorderBlack1
				source decoration filled rhomb
				target decoration arrow
			}
			Node_line composesBusinessInterfaceBusinessInterfaceDef for reference BusinessInterface.composesBusinessInterfaceBusinessInterface {
				label "composes"
				style BorderBlack1
				source decoration arrow
				target decoration filled rhomb
			}
			Node_line aggregatesBusinessInterfaceBusinessInterfaceDef for reference BusinessInterface.aggregatesBusinessInterfaceBusinessInterface {
				label "aggregates"
				style BorderBlack1
				source decoration rhomb
				target decoration arrow
			}
			Node_line aggregatedByBusinessInterfaceBusinessInterfaceDef for reference BusinessInterface.aggregatedByBusinessInterfaceBusinessInterface {
				label "aggregatedBy"
				style BorderBlack1
				source decoration arrow
				target decoration rhomb
			}
			Node_line composesBusinessRoleBusinessInterfaceDef for reference BusinessInterface.composesBusinessRoleBusinessInterface {
				label "composes"
				style BorderBlack1
				source decoration arrow
				target decoration filled rhomb
			}
			Node_line usedByBusinessActorBusinessInterfaceDef for reference BusinessInterface.usedByBusinessActorBusinessInterface {
				label "usedBy"
				style BorderBlack1
				source decoration none
				target decoration arrow
			}
			Node_line usedByBusinessRoleBusinessInterfaceDef for reference BusinessInterface.usedByBusinessRoleBusinessInterface {
				label "usedBy"
				style BorderBlack1
				source decoration none
				target decoration arrow
			}
			Node_line assignedToBusinessServiceBusinessInterfaceDef for reference BusinessInterface.assignedToBusinessServiceBusinessInterface {
				label "assignedTo"
				style BorderBlack1
				source decoration none
				target decoration none
			}
			Node_element BusinessRoleDef for class BusinessRole {
				label elementName
				label icon false
				label placement internal
				size (70, 50)
				Regular figure extends rectRounded10 {
					background color BusinessColor
					border BorderBlack2
				icon path "role.gif"
					icon size ( 35 , 30)
					icon position Point (32, 17)
				}
				phantom true
			}
			Node_line composedOfBusinessRoleBusinessRoleDef for reference BusinessRole.composedOfBusinessRoleBusinessRole {
				label "composedOf"
				style BorderBlack1
				source decoration filled rhomb
				target decoration arrow
			}
			Node_line composesBusinessRoleBusinessRoleDef for reference BusinessRole.composesBusinessRoleBusinessRole {
				label "composes"
				style BorderBlack1
			source decoration arrow
				target decoration filled rhomb
			}
			Node_line aggregatesBusinessRoleBusinessRoleDef for reference BusinessRole.aggregatesBusinessRoleBusinessRole {
				label "aggregates"
				style BorderBlack1
				source decoration rhomb
				target decoration arrow
			}
			Node_line aggregatedByBusinessRoleBusinessRoleDef for reference BusinessRole.aggregatedByBusinessRoleBusinessRole {
				label "aggregatedBy"
				style BorderBlack1
				source decoration arrow
				target decoration rhomb
			}
			Node_line aggregatedByBusinessCollaborationBusinessRoleDef for reference BusinessRole.aggregatedByBusinessCollaborationBusinessRole {
				label "aggregatedBy"
				style BorderBlack1
				source decoration arrow
				target decoration rhomb
			}
			Node_line assignedToBusinessActorBusinessRoleDef for reference BusinessRole.assignedToBusinessActorBusinessRole {
				label "assignedTo"
				style BorderBlack1
				source decoration none
				target decoration none
			}
			Node_line assignedToBusinessBehaviorElementBusinessRoleDef for reference BusinessRole.assignedToBusinessBehaviorElementBusinessRole {
				label "assignedTo"
				style BorderBlack1
				source decoration none
				target decoration none
			}
			Node_line composedOfBusinessInterfaceBusinessRoleDef for reference BusinessRole.composedOfBusinessInterfaceBusinessRole {
				label "composedOf"
				style BorderBlack1
				source decoration filled rhomb
				target decoration arrow
			}
			Node_line usesBusinessInterfaceBusinessRoleDef for reference BusinessRole.usesBusinessInterfaceBusinessRole {
				label "uses"
				style BorderBlack1
				source decoration none
				target decoration none
			}
			Node_line usesElementBusinessServiceBusinessRoleDef for reference BusinessRole.usesElementBusinessServiceBusinessRole {
				label "usesElement"
				style BorderBlack1
				source decoration none
				target decoration none
			}
			Node_element BusinessCollaborationDef for class BusinessCollaboration {
				label elementName
				label icon false
				label placement internal
				size (60, 50)
				Regular figure extends rectRounded10 {
					background color BusinessColor
					border BorderBlack1
					icon path "col2.gif"
					icon size ( 30 , 30)
					icon position Point (22, 15)
				}
				phantom true
			}
			Node_line aggregatesBusinessActorBusinessCollaborationDef for reference BusinessCollaboration.aggregatesBusinessActorBusinessCollaboration {
				label "aggregates"
				style BorderBlack1
				source decoration rhomb
				target decoration arrow
			}
			Node_line aggregatesBusinessRoleBusinessCollaborationDef for reference BusinessCollaboration.aggregatesBusinessRoleBusinessCollaboration {
				label "aggregates"
				style BorderBlack1
				source decoration rhomb
				target decoration arrow
			}
			Node_element BusinessActorDef for class BusinessActor {
				label elementName
				label icon false
				label placement internal
				size (70, 50)
				Regular figure extends rectRounded10 {
					background color BusinessColor
					border BorderBlack2
				icon path "actor.gif"
					icon size ( 30 , 30)
					icon position Point (22, 15)
				}
				phantom true
			}
			Node_line composedOfBusinessActorBusinessActorDef for reference BusinessActor.composedOfBusinessActorBusinessActor {
				label "composedOf"
				style BorderBlack1
				source decoration filled rhomb
				target decoration arrow
			}
			Node_line composesBusinessActorBusinessActorDef for reference BusinessActor.composesBusinessActorBusinessActor {
				label "composes"
				style BorderBlack1
				source decoration arrow
				target decoration filled rhomb
			}
			Node_line aggregatesBusinessActorBusinessActorDef for reference BusinessActor.aggregatesBusinessActorBusinessActor {
				label "aggregates"
				style BorderBlack1
				source decoration rhomb
				target decoration arrow
			}
			Node_line aggregatesBusinessActorBusinessActorDeffWarning extends composedOfProductProductDef {				
				style BorderRedDot
				source decoration filled rhomb
				target decoration arrow
			}
			Node_line aggregatedByBusinessActorBusinessActorDef for reference BusinessActor.aggregatedByBusinessActorBusinessActor {
				label "aggregatedBy"
				style BorderBlack1
				source decoration arrow
				target decoration rhomb
			}
			Node_line aggregatesByBusinessCollaborationBusinessActorDef for reference BusinessActor.aggregatesByBusinessCollaborationBusinessActor {
				label "aggregatesBy"
				style BorderBlack1
				source decoration rhomb
				target decoration arrow
			}
			Node_line usesBusinessInterfaceBusinessActorDef for reference BusinessActor.usesBusinessInterfaceBusinessActor {
				label "uses"
				style BorderBlack1
				source decoration none
				target decoration none
			}
			Node_line assignedToBusinessRoleBusinessActorDef for reference BusinessActor.assignedToBusinessRoleBusinessActor {
				label "assignedTo"
				style BorderBlack1
				source decoration none
				target decoration none
			}
			Node_line usesElementBusinessServiceBusinessActorDef for reference BusinessActor.usesElementBusinessServiceBusinessActor {
				label "usesElement"
				style BorderBlack1
				source decoration none
				target decoration none
			}
			Node_line assignedToLocationBusinessActorDef for reference BusinessActor.assignedToLocationBusinessActor {
				label "assignedTo"
				style BorderBlack1
				source decoration none
				target decoration none
			}

		}

		Rules definition  {
			
			Rules for class BusinessProcess{
				case "element.getImportance()<20 &&
					   element.getImportance()>=5" 
					use BusinessProcessBigWhite
				case "element.getImportance()<60 &&
					   element.getImportance()>=20"
					 use BusinessProcessWarning
				case "element.getImportance()>60" 
					use BusinessProcessBigwarning				
			}
			
			Rules for reference BusinessActor.aggregatesBusinessActorBusinessActor 
			{			
				case "source.getAggregatesBusinessActorBusinessActor().size()>3" use aggregatesBusinessActorBusinessActorDeffWarning 
			} 
			
		}

		Interaction definition {
			Interaction elements {
				
				
				Wizard WizardForCreateBasicBusinessProcess for context class BusinessProcess {
					title "BusinessProcessWizard"
					description "Create BusinessProcess Wizard"
					type create
					pages {
						Page {
							title "General Information"
							description "Define General Information"
							Attributes to show {
								("elementName", "Name", textField, "Process_")
								("description", "Description", textArea, "Insert Description...")
								("processID", "ID", textField, "ID")							
							}
							References to show {
		
							}
							Additionals buttons {
		 
							}
						}
						Page {
							title "Business Process Information"
							description "Business Process Information"
							Attributes to show {							
								("processID", "ID", textField, "ID")
								("processFullName", "processFullName", textField, "processFullName")
								("processType", "Process Type", textField, "            ")
								("importance", "Importance", Slider, "1,1,50")
								("processDesign", "BluePrint File Path", textField, "            ")
								("missionary", "Is Missionary", comboBox, "true,false")
							}
							References to show {
		
							}
							Additionals buttons {
		 
							}
						}

					}
					default buttons true
				}
				
				Wizard WizardForEditBasicBusinessProcess for context class BusinessProcess {
					title "BusinessProcessWizard"
					description "Create BusinessProcess Wizard"
					type create
					pages {						
						Page {
							title "Business Process Information"
							description "Business Process Information"
							Attributes to show {							
								("processID", "ID", textField, "ID")
								("processFullName", "processFullName", textField, "processFullName")
								("processType", "Process Type", textField, "            ")
								("importance", "Importance", Slider, "1,1,50")
								("processDesign", "BluePrint File Path", textField, "            ")
								("missionary", "Is Missionary", comboBox, "true,false")
							}
							References to show {
		
							}
							Additionals buttons {
		 
							}
						}

					}
					default buttons true
				}
				
				Wizard WizardForCreateBasicLocation for context class Location {
					title "LocationWizard"
					description "Create Location Wizard"
					type create
					pages {
						Page {
							title "Location Attributes"
							description "Define Location Attributes"
							Attributes to show {
								("elementName", "Name", textField, "Location_")
								("description", "Description", textArea, "Insert Description...")
								("address", "Adress", textArea, "Insert Adress...")
							}
							References to show {
		
							}
							Additionals buttons {
		 
							}
						}

					}
					default buttons true
				}
			
				Wizard WizardForCreateBasicBusinessRole for context class BusinessRole {
					title "BusinessRoleWizard"
					description "Create BusinessRole Wizard"
					type create
					pages {
						Page {
							title "BusinessRole Attributes"
							description "Definie BusinessRole Attributes"
							Attributes to show {
								("elementName", "Name", textField, "Location_")
								("description", "Description", textArea, "Insert Description...")
								("rank", "Rank", Slider, "1,1,10")
							}
							References to show {
		
							}
							Additionals buttons {
		 
							}
						}
					}
					default buttons true
				}
				
			}
			Statements {
				Actions for type BusinessProcess {
					on create do {
						show wizard WizardForCreateBasicBusinessProcess
					}
					on Menu event ("Edit Information") do {
						show wizard WizardForEditBasicBusinessProcess
					}
				}
				Actions for type Location {
					on mouse double click do {
						show wizard WizardForCreateBasicLocation 
					}				
				}
				Actions for type BusinessRole {
					on create do {
						show wizard WizardForCreateBasicBusinessRole
					}				
				}
			}
		}

	}

