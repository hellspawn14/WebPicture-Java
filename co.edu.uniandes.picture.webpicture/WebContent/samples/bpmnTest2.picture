
import "/model/bpmn2.ecore"
as MM
Graphical representation BPMN {
	reference package bpmn
	root MacroProcess
	Palette for MacroProcess {
		Tool group ElementsPalette {
			description "BPMN Elements"			
			Creation button for class Lane {
					name "Lane"
					description "Lane" 
					icon "/imagenes/NodeIcon.gif"
			}
			Creation button for class StartEvent {
					name "StartEvent"
					description "StartEvent" 
					icon "/imagenes/NodeIcon.gif"
				}
				Creation button for class IntermediateEvent {
					name "IntermediateEvent"
					description "IntermediateEvent" 
					icon "/imagenes/NodeIcon.gif"
				}
				Creation button for class EndEvent {
					name "EndEvent"
					description "EndEvent" 
					icon "/imagenes/NodeIcon.gif"
				}
				Creation button for class Activity {
					name "Activity"
					description "Activity" 
					icon "/imagenes/NodeIcon.gif"
				}
					Creation button for class Pool {
					name "Pool"
					description "Pool" 
					icon "/imagenes/NodeIcon.gif"
				}
					Creation button for class Gateway {
					name "Gateway"
					description "Gateway" 
					icon "/imagenes/NodeIcon.gif"
				}	
					Creation button for class DataObject {
					name "DataObject"
					description "DataObject" 
					icon "/imagenes/NodeIcon.gif"
				}
					/*Creation button for class SubProcess {
					name "SubProcess"
					description "SubProcess" 
					icon "/imagenes/NodeIcon.gif"
				}	*/
				Creation button for class SequenceFlow {
					name "SequenceFlow"
					description "SequenceFlow" 
					icon "/imagenes/NodeIcon.gif"
				}	
				Creation button for class MessageFlow {
					name "MessageFlow"
					description "MessageFlow" 
					icon "/imagenes/NodeIcon.gif"
				}	
				Creation button for class Association {
					name "Association"
					description "Association" 
					icon "/imagenes/NodeIcon.gif"
				}	
		}
	}
	Style definition {
		
		Color yellowBlack2 (233, 219, 48)
		Color black ( 0 ,  0 ,  0 )
		Color white ( 255 ,  255 ,  255 )
		Color yellow ( 255 ,  255 ,  0 )
		Color blue ( 0 ,  0 ,  255 )
		Color red ( 254 ,  0 ,  0 )
		Color green ( 0 ,  255 ,  0 )
		Color greenDark ( 3 ,  129 ,  35 )
		Color BlackRed(184 , 17 , 17)
		Line style BorderRedBlack2{
			width 2
			type solid
			color BlackRed
		}		
		
		Line style BorderyellowBlack2{
			width 2
			type solid
			color yellowBlack2
		}
		Line style BorderDarkGreen{
			width 2
			type solid
			color greenDark
		}
		
		Line style BorderYellow1 {
			width 1
			type solid
			color yellow
		}
		
		Line style BorderBlack1 {
			width 1
			type dot
			color black
		}
		Line style BorderBlack3 {
			width 3
			type solid
			color black
		}
		Line style BorderBlack4 {
			width 4
			type solid
			color black
		}
		Line style BorderRed4 {
			width 4
			type solid
			color red
		}
		Line style BorderRed2 {
			width 2
			type solid
			color red
		}
		Rounded rectRounded10 {
			radiox 10
			radioy 10
		}
		Ellipse ellipseEvent {
			proportion ( 30 ,  30 )
		}
		Regular polygon deca {
			vertex quantity 8
			start angle 90
		}
		Regular polygon cuadradro {
			vertex quantity 4
			start angle 90
		}
		Color Withe ( 255 ,  255 ,  255 )
		Color activeElementsColor ( 117 ,  235 ,  235 )
		Color techLayer ( 116 ,  232 ,  116 )
		Color behaviorElementsColor ( 241 ,  241 ,  181 )
		Color greenTestXX ( 44 ,  255 ,  45 )
		Color laneColor (185, 249 , 249)
		Color BlueChevere(3, 104, 154)
		
		Line style BorderBlueChevere{
			width 1
			type dot
			color BlueChevere
		}
		
		Line style BorderBlackDot {
			width 1
			type dot
			color black
		}
		Line style BorderBlack2 {
			width 2
			type solid
			color black
		}
	}
	Graphical
	definition {
		
		Node_element LaneDefinition
		for class Lane {
			label laneName
			label icon false
			label placement external	
			size ( 803 ,  302 )
			Image figure{
				image path "Lane.svg"
			}
			phantom false
		}
		Node_element PoolDefinition
		for class Pool {
			label poolName
			label icon false
			label placement external	
			size ( 812 ,  602 )
			Image figure{
				image path "Pool.svg"
			}
			phantom false
		}
		
		Node_element StartEventDef
		for class StartEvent {
			label elementName
			label icon false
			label placement external
			size ( 62 ,  62 )
			Regular figure extends  ellipseEvent{
				background color green
				border BorderDarkGreen				
			}
			phantom false
		}
		
		Node_element StartEventDefOriginal extends StartEventDef{				
				Regular figure extends ellipseEvent {
					background color green
					border BorderDarkGreen
				} 				
			}
		
		Node_element StartEventTimmerDef extends StartEventDef{				
				Regular figure extends ellipseEvent {
					background color green
					border BorderDarkGreen			
					icon path "clock.svg"
					icon size (36, 36 )
					icon position Point ( 15 ,  15 )
				} 				
			}
		Node_element StartEventMessageDef extends StartEventDef{				
				Regular figure extends ellipseEvent {
					background color green
					border BorderDarkGreen			
					icon path "message.svg"
					icon size (36, 36 )
					icon position Point ( 15 ,  15 )
				} 				
			}
			Node_element StartEventSignalDef extends StartEventDef{				
				Regular figure extends ellipseEvent {
					background color green
					border BorderDarkGreen			
					icon path "triangulo.svg"
					icon size (36, 36 )
					icon position Point ( 15 ,  15 )
				} 				
			}
			Node_element StartEventConditionalDef extends StartEventDef{				
				Regular figure extends ellipseEvent {
					background color green
					border BorderDarkGreen			
					icon path "condicional.svg"
					icon size (36, 36 )
					icon position Point ( 15 ,  15 )
				} 				
			}
			Node_element StartEventParallelDef extends StartEventDef{				
				Regular figure extends ellipseEvent {
					background color green
					border BorderDarkGreen			
					icon path "paralelo.svg"
					icon size (36, 36 )
					icon position Point ( 15 ,  15 )
				} 				
			}
			Node_element StartEventMultipleDef extends StartEventDef{				
				Regular figure extends ellipseEvent {
					background color green
					border BorderDarkGreen			
					icon path "multiple.svg"
					icon size (36, 36 )
					icon position Point ( 15 ,  15 )
				} 				
			}
		
		
		
		Node_element IntermediateEventDef
		for class IntermediateEvent {
			label elementName
			label icon false
			label placement external
			size ( 62 ,  62 )
			Regular figure extends  ellipseEvent{
				background color yellow
				border BorderyellowBlack2				
			}
			phantom false
		}
			//----------------------------------------------
			
			
Node_element IntermediateEventTimmerDef extends IntermediateEventDef{				
				Regular figure extends ellipseEvent {
				background color yellow
				border BorderyellowBlack2						
					icon path "clock.svg"
					icon size (36, 36 )
					icon position Point ( 15 ,  15 )
				} 				
			}
		Node_element IntermediateEventMessageDef extends IntermediateEventDef{				
				Regular figure extends ellipseEvent {
					background color yellow
				border BorderyellowBlack2				
					icon path "message.svg"
					icon size (36, 36 )
					icon position Point ( 15 ,  15 )
				} 				
			}
			Node_element IntermediateEventSignalDef extends IntermediateEventDef{				
				Regular figure extends ellipseEvent {
					background color yellow
				border BorderyellowBlack2				
					icon path "triangulo.svg"
					icon size (36, 36 )
					icon position Point ( 15 ,  15 )
				} 				
			}
			Node_element IntermediateEventConditionalDef extends IntermediateEventDef{				
				Regular figure extends ellipseEvent {
					background color yellow
				border BorderyellowBlack2				
					icon path "condicional.svg"
					icon size (36, 36 )
					icon position Point ( 15 ,  15 )
				} 				
			}
			Node_element IntermediateEventParallelDef extends IntermediateEventDef{				
				Regular figure extends ellipseEvent {
				background color yellow
				border BorderyellowBlack2				
					icon path "paralelo.svg"
					icon size (36, 36 )
					icon position Point ( 15 ,  15 )
				} 				
			}
			Node_element IntermediateEventMultipleDef extends IntermediateEventDef{				
				Regular figure extends ellipseEvent {
				background color yellow
				border BorderyellowBlack2				
					icon path "multiple.svg"
					icon size (36, 36 )
					icon position Point ( 15 ,  15 )
				} 	
				
				}			
				Node_element IntermediateEventLinkDef extends IntermediateEventDef{				
				Regular figure extends ellipseEvent {
				background color yellow
				border BorderyellowBlack2				
					icon path "link.svg"
					icon size (36, 36 )
					icon position Point ( 15 ,  15 )
				}}
				Node_element IntermediateEventCompensateDef extends IntermediateEventDef{				
				Regular figure extends ellipseEvent {
				background color yellow
				border BorderyellowBlack2				
					icon path "compensate.svg"
					icon size (36, 36 )
					icon position Point ( 15 ,  15 )
				}}
				Node_element IntermediateEventEscalationDef extends IntermediateEventDef{				
				Regular figure extends ellipseEvent {
					background color yellow
				border BorderyellowBlack2				
					icon path "escalation.svg"
					icon size (36, 36 )
					icon position Point ( 15 ,  15 )
				}
				}
				
			
			//---------------------------------------------		
			//	END EVENT
			//---------------------------------------------
			
			
			Node_element EndEventDef
		for class EndEvent {
			label elementName
			label icon false
			label placement external
			size ( 62 ,  62 )
			Regular figure extends  ellipseEvent{
				background color red
				border BorderRedBlack2				
			}
			phantom false
		}
			Node_element EndEventTerminalDef extends EndEventDef{				
				Regular figure extends ellipseEvent {
						background color red
				border BorderRedBlack2		
					icon path "terminal.svg"
					icon size (31, 31 )
					icon position Point ( 32 , 32 )
				} 				
			}
			
			Node_element EndEventErrorDef extends EndEventDef{				
				Regular figure extends ellipseEvent {
						background color red
				border BorderRedBlack2	
					icon path "error.svg"
					icon size (31, 31 )
					icon position Point ( 15 ,  15 )
				} 				
			}
				Node_element EndEventCancelDef extends EndEventDef{				
				Regular figure extends ellipseEvent {
						background color red
				border BorderRedBlack2	
					icon path "cancel.svg"
					icon size (31, 31 )
					icon position Point ( 15 ,  15 )
				} 				
			}
			//-------------------------------------------------------
			
			Node_element EndEventEscalationDef extends EndEventDef{				
				Regular figure extends ellipseEvent {
						background color red
				border BorderRedBlack2	
					icon path "escalation.svg"
					icon size (36, 36 )
					icon position Point ( 15 ,  15 )
				}
				}
			Node_element EndEventCompensateDef extends EndEventDef{				
				Regular figure extends ellipseEvent {
						background color red
				border BorderRedBlack2	
					icon path "compensate.svg"
					icon size (36, 36 )
					icon position Point ( 15 ,  15 )
				}}
Node_element EndEventMultipleDef extends EndEventDef{				
				Regular figure extends ellipseEvent {
					background color red
				border BorderRedBlack2	
					icon path "multiple.svg"
					icon size (36, 36 )
					icon position Point ( 15 ,  15 )
				} 	
				
				}	
Node_element EndEventSignalDef extends EndEventDef{				
				Regular figure extends ellipseEvent {
						background color red
				border BorderRedBlack2		
					icon path "triangulo.svg"
					icon size (36, 36 )
					icon position Point ( 15 ,  15 )
				} 				
			}
Node_element EndEventMessageDef extends EndEventDef{				
				Regular figure extends ellipseEvent {
						background color red
				border BorderRedBlack2	
					icon path "message.svg"
					icon size (36, 36 )
					icon position Point ( 15 ,  15 )
				} 				
			}
			//-------------------------------------------------------
			
			
			
			Node_element GateWayDef
		for class Gateway {
			label elementName
			label icon false
			label placement internal
			size ( 90 ,  90 )
			Image figure{
				image path "gateway.svg"
			}
			phantom false
		}
			Node_element GatewayComplexDef extends GateWayDef{				
				Image figure{
					image path "gatewayComplex.svg"
					
				}			
			}
			
			Node_element GatewayInclusiveDef extends GateWayDef{				
				Image figure{
					image path "gatewayInclusive.svg"
					
				}			
			}
			Node_element GatewayParallelDef extends GateWayDef{				
				Image figure{
					image path "gatewayP.svg"
					
				}			
			}
			Node_element GatewayEventBaseDef extends GateWayDef{				
				Image figure{
					image path "gatewayEB.svg"
					
				}			
			}
			Node_element GatewayExEventBaseDef extends GateWayDef{				
				Image figure{
					image path "gatewayEEB.svg"
					
				}			
			}
			Node_element GatewayParallelEventBaseDef extends GateWayDef{				
				Image figure{
					image path "gatewayPEB.svg"
					
				}			
			}
			
		
			Node_element ActivityDef
		for class Activity {
			label elementName
			label icon false
			label placement internal
			size ( 130 ,  65 )
			Regular figure extends rectRounded10 {
				background color Withe
				border BorderBlueChevere				
			}
			phantom false
		}
		
			Node_element DataObjectDef
		for class DataObject {
			label elementName
			label icon false
			label placement internal
			size ( 50 ,  60 )
			Image figure{
				image path "DataObject.svg"
			}
			phantom false
		}
		
		Internal_node elementssDef
		for reference Lane.elements {
			layout default layout
		}
		Internal_node lanesDef
		for reference Pool.lanes {
			layout default layout
		}
		
		
		
	/*	Node_link SequenceFlowConnectorDef for class SequenceFlow{
		label elementName
		style Line style  SequenceFlowConnector
		{
			width 2
			type solid
			color black
			
		}
		source decoration none
		target decoration filled closed  arrow
		source reference <- sourceC
		target reference  <- targetC
			
	}
			Node_link MessageFlowConnectorDef for class MessageFlow{
		label elementName
		style Line style  SequenceFlowConnector
		{
			width 2
			type dash
			color black
			
		}
		source decoration none
		target decoration  closed  arrow
		source reference <- sourceC
		target reference  <- targetC 
	}
	
	Node_link AssociationConnectorDef for class Association{
		label elementName
		style Line style  SequenceFlowConnector
		{
			width 2
			type dot
			color black
			
		}
		source decoration none
		target decoration none
		source reference <- sourceC
		target reference  <- targetC 
	} */
	
	}
	Rules definition {
		
		Rules for class StartEvent {
			
		case "element.getEventType()== null || element.getEventType().equals(\"\") " use StartEventDefOriginal
			case "element.getEventType()!= null && element.getEventType().equals(\"Message\")" use StartEventMessageDef
			case "element.getEventType()!= null && element.getEventType().equals(\"Signal\")" use StartEventSignalDef
			case "element.getEventType()!= null && element.getEventType().equals(\"Conditional\")" use StartEventConditionalDef
			case "element.getEventType()!= null && element.getEventType().equals(\"Parallel\")" use StartEventParallelDef
			case "element.getEventType()!= null && element.getEventType().equals(\"Multiple\")" use StartEventMultipleDef
			
			
		}
		Rules for class IntermediateEvent {
			case "element.getEventType()!= null && element.getEventType().equals(\"Timer\")" use IntermediateEventTimmerDef
			case "element.getEventType()!= null && element.getEventType().equals(\"Message\")" use IntermediateEventMessageDef
			case "element.getEventType()!= null && element.getEventType().equals(\"Signal\")" use IntermediateEventSignalDef
			case "element.getEventType()!= null && element.getEventType().equals(\"Link\")" use IntermediateEventLinkDef
			case "element.getEventType()!= null && element.getEventType().equals(\"Compensate\")" use IntermediateEventCompensateDef
			case "element.getEventType()!= null && element.getEventType().equals(\"Escalation\")" use IntermediateEventEscalationDef
			case "element.getEventType()!= null && element.getEventType().equals(\"Conditional\")" use IntermediateEventConditionalDef
			case "element.getEventType()!= null && element.getEventType().equals(\"Parallel\")" use IntermediateEventParallelDef
			case "element.getEventType()!= null && element.getEventType().equals(\"Multiple\")" use IntermediateEventMultipleDef
		}
		Rules for class EndEvent {
			case "element.getEventType()!= null && element.getEventType().equals(\"Terminate\")" use EndEventTerminalDef
			case "element.getEventType()!= null && element.getEventType().equals(\"Message\")" use EndEventMessageDef
			case "element.getEventType()!= null && element.getEventType().equals(\"Signal\")" use EndEventSignalDef
			case "element.getEventType()!= null && element.getEventType().equals(\"Compensate\")" use EndEventCompensateDef
			case "element.getEventType()!= null && element.getEventType().equals(\"Escalation\")" use EndEventEscalationDef
			case "element.getEventType()!= null && element.getEventType().equals(\"Error\")" use EndEventErrorDef
			case "element.getEventType()!= null && element.getEventType().equals(\"Cancel\")" use EndEventCancelDef
			case "element.getEventType()!= null && element.getEventType().equals(\"Multiple\")" use EndEventMultipleDef
		}
		Rules for class Gateway {
			case "element.getType()!= null && element.getType().equals(\"Parallel\")" use GatewayParallelDef
			case "element.getType()!= null && element.getType().equals(\"Inclusive\")" use GatewayInclusiveDef	
			case "element.getType()!= null && element.getType().equals(\"Event Base\")" use GatewayEventBaseDef
			case "element.getType()!= null && element.getType().equals(\"Exclusive Event Base\")" use GatewayExEventBaseDef
			case "element.getType()!= null && element.getType().equals(\"Parallel Event Base\")" use GatewayParallelEventBaseDef
			case "element.getType()!= null && element.getType().equals(\"Complex\")" use GatewayComplexDef
			}
				
	}
	Interaction definition {
		Interaction elements {
		/* 
		Wizard WizardForCreateStartEvent for context class StartEvent {
					title "Starting Event"
					description "Create Starting Event"
					type create
					pages {
						Page {
							title "Attributes"
							description "Define Attributes:"
							Attributes to show {
								("elementName", "Name", textField, "DataObject")
								("elementDescription", "Description", textArea, "Insert Description...")
								("eventType", "eventType", comboBox , ",Message,Signal")
							}
							References to show {
		
							}
							Additionals buttons {
		 
							}
						}
							Page {
							title "Type"
							description "Define Type:"
							Attributes to show {
									("eventType", "eventType", comboBox , ",Message,Signal")
							}
							References to show {
		
							}
							Additionals buttons {
		 
							}
						}
					}
					default buttons true
				}*/
		}
		Statements {
		/* 	Actions for type StartEvent {
				on create do {
					show wizard WizardForCreateStartEvent
				}
				on mouse double click do{
					show wizard WizardForCreateStartEvent
				}
			}*/
		} 
	}
}