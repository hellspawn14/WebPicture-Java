import "/model/ArchimateBPMN.ecore" as MM
Graphical representation ArchiBPM {
	reference package archiBPM
	root ArchimateModel
	Palette for ArchimateModel {
		Tool group relationsGroup {
			description "Connectors"
			Creation button for class Composition {
				name "Composition"
				description "Composition" icon "/imagenes/CompositionIcon.gif"
			}
			Creation button for class Aggregation {
				name "Aggregation"
				description "Aggregation" icon "/imagenes/AggregationIcon.gif"
			}
			Creation button for class Access {
				name "Access"
				description "Access" icon "/imagenes/AccessIcon.gif"
			}
			Creation button for class Association {
				name "Association"
				description "Association" icon "/imagenes/AssociationIcon.gif"
			}
			Creation button for class Triggering {
				name "Triggering"
				description "Triggering" icon "/imagenes/TriggeringIcon.gif"
			}
			Creation button for class Flow {
				name "Flow"
				description "Flow" icon "/imagenes/FlowIcon.gif"
			}
			Creation button for class Specialization {
				name "Specialization"
				description "Specialization" icon "/imagenes/SpecializationIcon.gif"
			}
			Creation button for class Realization {
				name "Realization"
				description "Realization" icon "/imagenes/RealizationIcon.gif"
			}
			Creation button for class Assignment {
				name "Assignment"
				description "Assignment" icon "/imagenes/AssignmentIcon.gif"
			}
			Creation button for class UsedBy {
				name "UsedBy"
				description "UsedBy" icon "/imagenes/UsedByIcon.gif"
			}
			Creation button for class Group {
				name "Group"
				description "Group" icon "/imagenes/Group.gif"
			}
		}
		Tool group AppPalette {
			description "Application Layer"
			Creation button for class ApplicationComponent {
				name "ApplicationComponent"
				description "ApplicationComponent" icon
				"/imagenes/ApplicationComponentIcon.gif"
			}
			Creation button for class ApplicationCollaboration {
				name "ApplicationCollaboration"
				description "ApplicationCollaboration" icon
				"/imagenes/ApplicationCollaborationIcon.gif"
			}
			Creation button for class ApplicationInterface {
				name "ApplicationInterface"
				description "ApplicationInterface" icon
				"/imagenes/ApplicationInterfaceIcon.gif"
			}
			Creation button for class DataObject {
				name "DataObject"
				description "DataObject" icon "/imagenes/DataObjectIcon.gif"
			}
			Creation button for class ApplicationFunction {
				name "ApplicationFunction"
				description "ApplicationFunction" icon
				"/imagenes/ApplicationFunctionIcon.gif"
			}
			Creation button for class ApplicationInteraction {
				name "ApplicationInteraction"
				description "ApplicationInteraction" icon
				"/imagenes/ApplicationInteractionIcon.gif"
			}
			Creation button for class ApplicationService {
				name "ApplicationService"
				description "ApplicationService" icon
				"/imagenes/ApplicationServiceIcon.gif"
			}
		}
		Tool group ArchimatePalette {
			description "Archimate Business Palette"
			Creation button for class Product {
				name "Product"
				description "Product" icon "/imagenes/ProductIcon.gif"
			}
			Creation button for class Contract {
				name "Contract"
				description "Contract" icon "/imagenes/ContractIcon.gif"
			}
			Creation button for class Meaning {
				name "Meaning"
				description "Meaning" icon "/imagenes/MeaningIcon.gif"
			}
			Creation button for class Representation {
				name "Representation"
				description "Representation" icon "/imagenes/RepresentationIcon.gif"
			}
			Creation button for class BusinessObject {
				name "BusinessObject"
				description "BusinessObject" icon "/imagenes/BusinessObjectIcon.gif"
			}
			Creation button for class BusinessService {
				name "BusinessService"
				description "BusinessService" icon "/imagenes/BusinessServiceIcon.gif"
			}
			Creation button for class BusinessProcess {
				name "BusinessProcess"
				description "BusinessProcess" icon "/imagenes/BusinessProcessIcon.gif"
			}
			Creation button for class BusinessFunction {
				name "BusinessFunction"
				description "BusinessFunction" icon "/imagenes/BusinessFunctionIcon.gif"
			}
			Creation button for class BusinessInteraction {
				name "BusinessInteraction"
				description "BusinessInteraction" icon
				"/imagenes/BusinessInteractionIcon.gif"
			}
			Creation button for class BusinessEvent {
				name "BusinessEvent"
				description "BusinessEvent" icon "/imagenes/BusinessEventIcon.gif"
			}
			Creation button for class Location {
				name "Location"
				description "Location" icon "/imagenes/LocationIcon.gif"
			}
			Creation button for class BusinessInterface {
				name "BusinessInterface"
				description "BusinessInterface" icon "/imagenes/BusinessInterfaceIcon.gif"
			}
			Creation button for class BusinessRole {
				name "BusinessRole"
				description "BusinessRole" icon "/imagenes/BusinessRoleIcon.gif"
			}
			Creation button for class BusinessCollaboration {
				name "BusinessCollaboration"
				description "BusinessCollaboration" icon
				"/imagenes/BusinessCollaborationIcon.gif"
			}
			Creation button for class BusinessActor {
				name "BusinessActor"
				description "BusinessActor" icon "/images/actor.gif"
			}
		}
		Tool group ElementsPalette {
			description "BPMN Elements"
			Creation button for class Lane {
				name "Lane"
				description "Lane" icon "/imagenes/NodeIcon.gif"
			}
			Creation button for class StartEvent {
				name "StartEvent"
				description "StartEvent" icon "/imagenes/NodeIcon.gif"
			}
			Creation button for class IntermediateEvent {
				name "IntermediateEvent"
				description "IntermediateEvent" icon "/imagenes/NodeIcon.gif"
			}
			Creation button for class EndEvent {
				name "EndEvent"
				description "EndEvent" icon "/imagenes/NodeIcon.gif"
			}
			Creation button for class Activity {
				name "Activity"
				description "Activity" icon "/imagenes/NodeIcon.gif"
			}
			Creation button for class Pool {
				name "Pool"
				description "Pool" icon "/imagenes/NodeIcon.gif"
			}
			Creation button for class Gateway {
				name "Gateway"
				description "Gateway" icon "/imagenes/NodeIcon.gif"
			}
			Creation button for class SequenceFlow {
				name "SequenceFlow"
				description "SequenceFlow" icon "/imagenes/NodeIcon.gif"
			}
			Creation button for class MessageFlow {
				name "MessageFlow"
				description "MessageFlow" icon "/imagenes/NodeIcon.gif"
			}
		}
	}
	Style definition {
		Rounded rectRounded10 {
			radiox 10
			radioy 10
		}
		Color BusinessColor ( 241 ,  241 ,  181 )
		Color black ( 0 ,  0 ,  0 )
		Line style BorderBlack2 {
			width 2
			type solid
			color black
		}
		Line style BorderBlack1 {
			width 1
			type dot
			color black
		}
		Line style BorderBlackDash {
			width 1
			type dash
			color black
		}
		Color white ( 255 ,  255 ,  255 )
		Color yellow ( 255 ,  255 ,  0 )
		Color blue ( 0 ,  0 ,  255 )
		Color red ( 255 ,  0 ,  0 )
		Color green ( 0 ,  255 ,  0 )
		Line style BorderBlack3 {
			width 3
			type solid
			color black
		}
		Line style BorderBlack4 {
			width 4
			type solid
			color black
		}
		Line style BorderRed2 {
			width 2
			type solid
			color red
		}
		Rounded rectService {
			radiox 29
			radioy 45
		}
		Ellipse ellipseEvent {
			proportion ( 30 ,  30 )
		}

		Regular polygon deca {
			vertex quantity 8
			start angle 90
		}
		Color Withe ( 255 ,  255 ,  255 )
		Color AppLayerColor ( 117 ,  235 ,  235 )
		Color pasiveElementsColor ( 116 ,  232 ,  116 )
		Color behaviorElementsColor ( 241 ,  241 ,  181 )
		Color greenTestXX ( 44 ,  255 ,  45 )
		Line style BorderBlackDot {
			width 1
			type dot
			color black
		}
		Line style Borderwhite {
			width 2
			type solid
			color white
		}
		Rounded imageService {
			radiox 29
			radioy 45
		}
		Rounded cuadrado {
			radiox 0
			radioy 0
		}
		Ellipse ValueImage {
			proportion ( 32 ,  19 )
		}
		Line style BorderWhite {
			width 3
			type solid
			color Withe
		}
		Line style BorderRedDot {
			width 4
			type dot
			color red
		}
		Line style BorderBusinessColor {
			width 3
			type solid
			color BusinessColor
		}
		Color activeElementsColor ( 117 ,  235 ,  235 )
		Color techLayer ( 116 ,  232 ,  116 )
		Line style lineConnectorNormal {
			width 2
			type solid
			color black
		}
		Line style lineRealization {
			width 2
			type dash
			color black
		}
		Line style lineAccess {
			width 2
			type dot
			color black
		}
		Line style lineFlow {
			width 2
			type dashdotdot
			color black
		}
		Color PinkColor ( 254 ,  204 ,  255 )
		Color purple ( 204 ,  204 ,  254 )
		Color piel ( 255 ,  222 ,  226 )
		Color yellowBlack2 ( 233 ,  219 ,  48 )
		Color greenDark ( 3 ,  129 ,  35 )
		Color BlackRed ( 184 ,  17 ,  17 )
		Line style BorderRedBlack2 {
			width 2
			type solid
			color BlackRed
		}
		Line style BorderyellowBlack2 {
			width 2
			type solid
			color yellowBlack2
		}
		Line style BorderDarkGreen {
			width 2
			type solid
			color greenDark
		}
		Line style BorderYellow1 {
			width 1
			type solid
			color yellow
		}
		Line style BorderRed4 {
			width 4
			type solid
			color red
		}
		Regular polygon cuadradro {
			vertex quantity 4
			start angle 90
		}
		Color laneColor ( 185 ,  249 ,  249 )
		Color BlueChevere ( 3 ,  104 ,  154 )
		Line style BorderBlueChevere {
			width 1
			type dot
			color BlueChevere
		}
	}
	Graphical
	definition {
		Node_element MacroProcessElementDef
		for class BusinessProcess {
			label elementName
			label icon false
			label placement internal
			size ( 1000 ,  1000 )
			Regular figure extends rectRounded10 {
				background color BusinessColor
				border BorderBlack2 icon
				path "iconiconiconProcessIcon2.svg" icon
				size ( 16 ,  16 )
				icon
				position
				Point ( 123 ,  2 )
			}
			phantom false
		}
		Node_element GroupDef
		for class Group {
			label groupName
			label icon false
			label placement internal
			size ( 601 ,  251 )
			Image figure {
				image path "icongroup.svg"
			}
			phantom false
		}
		Internal_node composedOfGroupDef
		for reference Group.groupElements {
			layout default
			layout
		}
		Node_element ApplicationCollaborationDef
		for class ApplicationCollaboration {
			label elementName
			label icon false
			label placement internal
			size ( 140 ,  60 )
			Regular figure extends rectRounded10 {
				background color AppLayerColor
				border BorderBlack1 icon
				path "iconiconiconcollaboarationIconF.svg" icon
				size ( 24 ,  16 )
				icon
				position
				Point ( 115 ,  2 )
			}
			phantom false
		}
		Node_element DataObjectDef
		for class DataObject {
			label elementName
			label icon false
			label placement internal
			size ( 70 ,  50 )
			Image figure {
				image path "DataObjectIcon.gif"
			}
			phantom false
		}
		Node_element ApplicationServiceDef
		for class ApplicationService {
			label elementName
			label icon false
			label placement internal
			size ( 92 ,  52 )
			Regular figure extends rectService {
				background color AppLayerColor
				border BorderBlack2
			}
			phantom false
		}
		Node_element ApplicationFunctionDef
		for class ApplicationFunction {
			label elementName
			label icon false
			label placement internal
			size ( 140 ,  60 )
			Regular figure extends rectRounded10 {
				background color AppLayerColor
				border BorderBlack1 icon
				path "iconiconiconfunctionIcon.svg" icon
				size ( 16 ,  16 )
				icon
				position
				Point ( 123 ,  2 )
			}
			phantom false
		}
		Node_element ApplicationInteractionDef
		for class ApplicationInteraction {
			label elementName
			label icon false
			label placement internal
			size ( 140 ,  60 )
			Regular figure extends rectRounded10 {
				background color AppLayerColor
				border BorderBlack1 icon
				path "iconiconiconInteractionIcon.svg" icon
				size ( 16 ,  16 )
				icon
				position
				Point ( 123 ,  2 )
			}
			phantom false
		}
		Node_element ApplicationInterfaceDef
		for class ApplicationInterface {
			label elementName
			label icon false
			label placement internal
			size ( 140 ,  60 )
			Regular figure extends rectRounded10 {
				background color AppLayerColor
				border BorderBlack2 icon
				path "iconiconiconInterfaceIcon.svg" icon
				size ( 25 ,  16 )
				icon
				position
				Point ( 114 ,  2 )
			}
			phantom false
		}
		Node_element ApplicationComponentDef
		for class ApplicationComponent {
			label elementName
			label icon false
			label placement external
			size ( 100 ,  100 )
			Regular figure extends rectRounded10 {
				background color AppLayerColor
				border Borderwhite icon
				path "iconiconiconApplicationComponent.svg" icon
				size ( 99 ,  99 )
				icon
				position
				Point ( 1 ,  1 )
			}
			phantom false
		}
		Node_element ArchimateElementDef
		for class ArchimateElement {
			label elementName
			label icon false
			label placement internal
			size ( 70 ,  50 )
			Regular figure extends rectRounded10 {
				background color white
				border BorderBlack2
			}
			phantom false
		}
		Node_element ProductDef
		for class Product {
			label elementName
			label icon false
			label placement internal
			size ( 64 ,  54 )
			Image figure {
				image path "ProductIcon.gif"
			}
			phantom false
		}
		Node_element MeaningDef
		for class Meaning {
			label elementName
			label icon false
			label placement internal
			size ( 67 ,  67 )
			Regular figure extends rectRounded10 {
				background color BusinessColor
				border BorderWhite icon
				path "iconiconiconCloud.svg" icon
				size ( 64 ,  64 )
				icon
				position
				Point ( 3 ,  3 )
			}
			phantom false
		}
		Node_element RepresentationDef
		for class Representation {
			label elementName
			label icon false
			label placement external
			size ( 65 ,  65 )
			Regular figure extends cuadrado {
				background color BusinessColor
				border BorderWhite icon
				path "iconiconiconrepresentation.svg" icon
				size ( 64 ,  64 )
				icon
				position
				Point ( 1 ,  1 )
			}
			phantom false
		}
		Node_element ContractDef
		for class Contract {
			label elementName
			label icon false
			label placement internal
			size ( 64 ,  54 )
			Image figure {
				image path "ContractIcon.gif"
			}
			phantom false
		}
		Node_element BusinessObjectDef
		for class BusinessObject {
			label elementName
			label icon false
			label placement internal
			size ( 64 ,  54 )
			Image figure {
				image path "ProductIcon.gif"
			}
			phantom false
		}
		Node_element BusinessServiceDef
		for class BusinessService {
			label elementName
			label icon false
			label placement internal
			size ( 140 ,  62 )
			Regular figure extends imageService {
				background color BusinessColor
				border BorderBlack1
			}
			phantom false
		}
		Node_element BusinessFunctionDef
		for class BusinessFunction {
			label elementName
			label icon false
			label placement internal
			size ( 140 ,  60 )
			Regular figure extends rectRounded10 {
				background color BusinessColor
				border BorderBlack1 icon
				path "iconiconiconfunctionIcon.svg" icon
				size ( 16 ,  16 )
				icon
				position
				Point ( 123 ,  2 )
			}
			phantom false
		}
		Node_element BusinessInteractionDef
		for class BusinessInteraction {
			label elementName
			label icon false
			label placement internal
			size ( 140 ,  60 )
			Regular figure extends rectRounded10 {
				background color BusinessColor
				border BorderBlack1 icon
				path "iconiconiconInteractionIcon.svg" icon
				size ( 16 ,  16 )
				icon
				position
				Point ( 123 ,  2 )
			}
			phantom false
		}
		Node_element BusinessEventDef
		for class BusinessEvent {
			label elementName
			label icon false
			label placement external
			size ( 85 ,  65 )
			Image figure {
				image path "iconiconiconeventFigure.svg"
			}
			phantom false
		}
		Node_element LocationDef
		for class Location {
			label elementName
			label icon false
			label placement external
			size ( 56 ,  87 )
			Regular figure extends rectRounded10 {
				background color white
				border BorderWhite icon
				path "iconiconiconlocation.svg" icon
				size ( 56 ,  87 )
				icon
				position
				Point ( 1 ,  1 )
			}
			phantom false
		}
		Node_element BusinessInterfaceDef
		for class BusinessInterface {
			label elementName
			label icon false
			label placement internal
			size ( 140 ,  60 )
			Regular figure extends rectRounded10 {
				background color BusinessColor
				border BorderBlack2 icon
				path "iconiconiconInterfaceIcon.svg" icon
				size ( 25 ,  16 )
				icon
				position
				Point ( 114 ,  2 )
			}
			phantom false
		}
		Node_element BusinessActorDef
		for class BusinessActor {
			label elementName
			label icon false
			label placement internal
			size ( 140 ,  60 )
			Regular figure extends rectRounded10 {
				background color BusinessColor
				border BorderBlack2 icon
				path "iconiconiconActorIcon.svg" icon
				size ( 16 ,  16 )
				icon
				position
				Point ( 123 ,  2 )
			}
			phantom false
		}
		Node_element BusinessCollaborationDef
		for class BusinessCollaboration {
			label elementName
			label icon false
			label placement internal
			size ( 140 ,  60 )
			Regular figure extends rectRounded10 {
				background color BusinessColor
				border BorderBlack1 icon
				path "iconiconiconcollaboarationIconF.svg" icon
				size ( 24 ,  16 )
				icon
				position
				Point ( 114 ,  2 )
			}
			phantom false
		}
		Node_element BusinessRoleDef
		for class BusinessRole {
			label elementName
			label icon false
			label placement internal
			size ( 140 ,  60 )
			Regular figure extends rectRounded10 {
				background color BusinessColor
				border BorderBlack2 icon
				path "iconiconiconroleIcon.svg" icon
				size ( 16 ,  16 )
				icon
				position
				Point ( 123 ,  2 )
			}
			phantom false
		}
		Node_element LaneDefinition
		for class Lane {
			label laneName
			label icon false
			label placement external
			size ( 803 ,  302 )
			Image figure {
				image path "iconLane.svg"
			}
			phantom false
		}
		Node_element PoolDefinition
		for class Pool {
			label poolName
			label icon false
			label placement external
			size ( 812 ,  602 )
			Image figure {
				image path "iconPool.svg"
			}
			phantom false
		}
		Node_element StartEventDef
		for class StartEvent {
			label elementName
			label icon false
			label placement external
			size ( 62 ,  62 )
			Regular figure extends ellipseEvent {
				background color green
				border BorderDarkGreen
			}
			phantom false
		}
		Node_element StartEventDefOriginal
		extends StartEventDef {
			Regular figure extends ellipseEvent {
				background color green
				border BorderDarkGreen
			}
		}
		Node_element StartEventTimmerDef
		extends StartEventDef {
			Regular figure extends ellipseEvent {
				background color green
				border BorderDarkGreen icon
				path "iconclock.svg" icon
				size ( 36 ,  36 )
				icon
				position
				Point ( 15 ,  15 )
			}
		}
		Node_element StartEventMessageDef
		extends StartEventDef {
			Regular figure extends ellipseEvent {
				background color green
				border BorderDarkGreen icon
				path "iconmessage.svg" icon
				size ( 36 ,  36 )
				icon
				position
				Point ( 15 ,  15 )
			}
		}
		Node_element StartEventSignalDef
		extends StartEventDef {
			Regular figure extends ellipseEvent {
				background color green
				border BorderDarkGreen icon
				path "icontriangulo.svg" icon
				size ( 36 ,  36 )
				icon
				position
				Point ( 15 ,  15 )
			}
		}
		Node_element StartEventConditionalDef
		extends StartEventDef {
			Regular figure extends ellipseEvent {
				background color green
				border BorderDarkGreen icon
				path "iconcondicional.svg" icon
				size ( 36 ,  36 )
				icon
				position
				Point ( 15 ,  15 )
			}
		}
		Node_element StartEventParallelDef
		extends StartEventDef {
			Regular figure extends ellipseEvent {
				background color green
				border BorderDarkGreen icon
				path "iconparalelo.svg" icon
				size ( 36 ,  36 )
				icon
				position
				Point ( 15 ,  15 )
			}
		}
		Node_element StartEventMultipleDef
		extends StartEventDef {
			Regular figure extends ellipseEvent {
				background color green
				border BorderDarkGreen icon
				path "iconmultiple.svg" icon
				size ( 36 ,  36 )
				icon
				position
				Point ( 15 ,  15 )
			}
		}
		Node_element IntermediateEventDef
		for class IntermediateEvent {
			label elementName
			label icon false
			label placement external
			size ( 62 ,  62 )
			Regular figure extends ellipseEvent {
				background color yellow
				border BorderyellowBlack2
			}
			phantom false
		}
		Node_element IntermediateEventTimmerDef
		extends IntermediateEventDef {
			Regular figure extends ellipseEvent {
				background color yellow
				border BorderyellowBlack2 icon
				path "iconclock.svg" icon
				size ( 36 ,  36 )
				icon
				position
				Point ( 15 ,  15 )
			}
		}
		Node_element IntermediateEventMessageDef
		extends IntermediateEventDef {
			Regular figure extends ellipseEvent {
				background color yellow
				border BorderyellowBlack2 icon
				path "iconmessage.svg" icon
				size ( 36 ,  36 )
				icon
				position
				Point ( 15 ,  15 )
			}
		}
		Node_element IntermediateEventSignalDef
		extends IntermediateEventDef {
			Regular figure extends ellipseEvent {
				background color yellow
				border BorderyellowBlack2 icon
				path "icontriangulo.svg" icon
				size ( 36 ,  36 )
				icon
				position
				Point ( 15 ,  15 )
			}
		}
		Node_element IntermediateEventConditionalDef
		extends IntermediateEventDef {
			Regular figure extends ellipseEvent {
				background color yellow
				border BorderyellowBlack2 icon
				path "iconcondicional.svg" icon
				size ( 36 ,  36 )
				icon
				position
				Point ( 15 ,  15 )
			}
		}
		Node_element IntermediateEventParallelDef
		extends IntermediateEventDef {
			Regular figure extends ellipseEvent {
				background color yellow
				border BorderyellowBlack2 icon
				path "iconparalelo.svg" icon
				size ( 36 ,  36 )
				icon
				position
				Point ( 15 ,  15 )
			}
		}
		Node_element IntermediateEventMultipleDef
		extends IntermediateEventDef {
			Regular figure extends ellipseEvent {
				background color yellow
				border BorderyellowBlack2 icon
				path "iconmultiple.svg" icon
				size ( 36 ,  36 )
				icon
				position
				Point ( 15 ,  15 )
			}
		}
		Node_element IntermediateEventLinkDef
		extends IntermediateEventDef {
			Regular figure extends ellipseEvent {
				background color yellow
				border BorderyellowBlack2 icon
				path "iconlink.svg" icon
				size ( 36 ,  36 )
				icon
				position
				Point ( 15 ,  15 )
			}
		}
		Node_element IntermediateEventCompensateDef
		extends IntermediateEventDef {
			Regular figure extends ellipseEvent {
				background color yellow
				border BorderyellowBlack2 icon
				path "iconcompensate.svg" icon
				size ( 36 ,  36 )
				icon
				position
				Point ( 15 ,  15 )
			}
		}
		Node_element IntermediateEventEscalationDef
		extends IntermediateEventDef {
			Regular figure extends ellipseEvent {
				background color yellow
				border BorderyellowBlack2 icon
				path "iconescalation.svg" icon
				size ( 36 ,  36 )
				icon
				position
				Point ( 15 ,  15 )
			}
		}
		Node_element EndEventDef
		for class EndEvent {
			label elementName
			label icon false
			label placement external
			size ( 62 ,  62 )
			Regular figure extends ellipseEvent {
				background color red
				border BorderRedBlack2
			}
			phantom false
		}
		Node_element EndEventTerminalDef
		extends EndEventDef {
			Regular figure extends ellipseEvent {
				background color red
				border BorderRedBlack2 icon
				path "iconterminal.svg" icon
				size ( 31 ,  31 )
				icon
				position
				Point ( 32 ,  32 )
			}
		}
		Node_element EndEventErrorDef
		extends EndEventDef {
			Regular figure extends ellipseEvent {
				background color red
				border BorderRedBlack2 icon
				path "iconerror.svg" icon
				size ( 31 ,  31 )
				icon
				position
				Point ( 15 ,  15 )
			}
		}
		Node_element EndEventCancelDef
		extends EndEventDef {
			Regular figure extends ellipseEvent {
				background color red
				border BorderRedBlack2 icon
				path "iconcancel.svg" icon
				size ( 31 ,  31 )
				icon
				position
				Point ( 15 ,  15 )
			}
		}
		Node_element EndEventEscalationDef
		extends EndEventDef {
			Regular figure extends ellipseEvent {
				background color red
				border BorderRedBlack2 icon
				path "iconescalation.svg" icon
				size ( 36 ,  36 )
				icon
				position
				Point ( 15 ,  15 )
			}
		}
		Node_element EndEventCompensateDef
		extends EndEventDef {
			Regular figure extends ellipseEvent {
				background color red
				border BorderRedBlack2 icon
				path "iconcompensate.svg" icon
				size ( 36 ,  36 )
				icon
				position
				Point ( 15 ,  15 )
			}
		}
		Node_element EndEventMultipleDef
		extends EndEventDef {
			Regular figure extends ellipseEvent {
				background color red
				border BorderRedBlack2 icon
				path "iconmultiple.svg" icon
				size ( 36 ,  36 )
				icon
				position
				Point ( 15 ,  15 )
			}
		}
		Node_element EndEventSignalDef
		extends EndEventDef {
			Regular figure extends ellipseEvent {
				background color red
				border BorderRedBlack2 icon
				path "icontriangulo.svg" icon
				size ( 36 ,  36 )
				icon
				position
				Point ( 15 ,  15 )
			}
		}
		Node_element EndEventMessageDef
		extends EndEventDef {
			Regular figure extends ellipseEvent {
				background color red
				border BorderRedBlack2 icon
				path "iconmessage.svg" icon
				size ( 36 ,  36 )
				icon
				position
				Point ( 15 ,  15 )
			}
		}
		Node_element GateWayDef
		for class Gateway {
			label elementName
			label icon false
			label placement internal
			size ( 90 ,  90 )
			Image figure {
				image path "icongateway.svg"
			}
			phantom false
		}
		Node_element GatewayComplexDef
		extends GateWayDef {
			Image figure {
				image path "icongatewayComplex.svg"
			}
		}
		Node_element GatewayInclusiveDef
		extends GateWayDef {
			Image figure {
				image path "icongatewayInclusive.svg"
			}
		}
		Node_element GatewayParallelDef
		extends GateWayDef {
			Image figure {
				image path "icongatewayP.svg"
			}
		}
		Node_element GatewayEventBaseDef
		extends GateWayDef {
			Image figure {
				image path "icongatewayEB.svg"
			}
		}
		Node_element GatewayExEventBaseDef
		extends GateWayDef {
			Image figure {
				image path "icongatewayEEB.svg"
			}
		}
		Node_element GatewayParallelEventBaseDef
		extends GateWayDef {
			Image figure {
				image path "icongatewayPEB.svg"
			}
		}
		Node_element ActivityDef
		for class Activity {
			label elementName
			label icon false
			label placement internal
			size ( 130 ,  65 )
			Regular figure extends rectRounded10 {
				background color Withe
				border BorderBlueChevere
			}
			phantom false
		}
		Internal_node elementssDef
		for reference Lane.elements {
			layout default
			layout
		}
		Internal_node lanesDef
		for reference Pool.lanes {
			layout default
			layout
		}

		Internal_node PoolsDefConn
		for reference BusinessProcess.pools {
			layout default
			layout
		}

		//---------------------------------PEgado A Mano:--------------------
		Node_link CompositionConnector for class Composition{
		label connectorName
		style Line style  lineConnectorNormal
		{
			width 2
			type solid
			color black

		}
		source decoration filled rhomb
		target decoration none
		source reference <- sourceC
		target reference  <- targetC
	}

	Node_link AggregationConnector for class Aggregation{
		label connectorName
		style Line style  lineConnectorNormalAggregation
		{
			width 2
			type solid
			color black

		}
		source decoration rhomb
		target decoration none
		source reference <- sourceC
		target reference  <- targetC
	}




	Node_link AssignmentConnector for class Assignment{
		label connectorName
		style Line style  lineConnectorNormalAssignmentn
		{
			width 2
			type solid
			color black

		}
		source decoration filled square
		target decoration filled square
		source reference <- sourceC
		target reference  <- targetC
	}

	Node_link RealizationConnector for class Realization{
		label connectorName
		style Line style  lineConnectorRealization
		{
			width 2
			type dash
			color black

		}
		source decoration none
		target decoration closed arrow
		source reference <- sourceC
		target reference  <- targetC
	}


	Node_link UsedByConnector for class UsedBy{
		label connectorName
		style Line style  lineConnectorUsedBy
		{
			width 2
			type solid
			color black

		}
		source decoration none
		target decoration arrow
		source reference <- sourceC
		target reference  <- targetC
	}

	Node_link AccessConnector for class Access{
		label connectorName
		style Line style  lineConnectorAccess
		{
			width 2
			type dot
			color black

		}
		source decoration none
		target decoration arrow
		source reference <- sourceC
		target reference  <- targetC
	}

	Node_link AssociationConnector for class Association{
		label connectorName
		style Line style  lineConnectorAssociation
		{
			width 2
			type solid
			color black

		}
		source decoration none
		target decoration none
		source reference <- sourceC
		target reference  <- targetC
	}

	Node_link TriggeringConnector for class Triggering{
		label connectorName
		style Line style  lineConnectorTriggering
		{
			width 2
			type solid
			color black

		}
		source decoration none
		target decoration filled closed  arrow
		source reference <- sourceC
		target reference  <- targetC
	}

		Node_link FlowConnector for class Flow{
		label connectorName
		style Line style  lineConnectorFlow
		{
			width 2
			type dashdotdot
			color black

		}
		source decoration none
		target decoration filled closed  arrow
		source reference <- sourceC
		target reference  <- targetC
	}

	Node_link SpecializationConnector for class Specialization{
		label connectorName
		style Line style  lineConnectorSpecialization
		{
			width 2
			type solid
			color black

		}
		source decoration none
		target decoration closed  arrow
		source reference <- sourceC
		target reference  <- targetC
	}

	Node_link SequenceFlowConnectorDef for class SequenceFlow{
		label connectorName
		style Line style  SequenceFlowConnector
		{
			width 2
			type solid
			color black

		}
		source decoration none
		target decoration filled closed  arrow
		source reference <- sourceC
		target reference  <- targetC

	}
			Node_link MessageFlowConnectorDef for class MessageFlow{
		label connectorName
		style Line style  SequenceFlowConnector
		{
			width 2
			type dash
			color black

		}
		source decoration none
		target decoration  closed  arrow
		source reference <- sourceC
		target reference  <- targetC
	}

	Node_link AssociationConnectorDef for class AssociationBPMN{
		label connectorName
		style Line style  SequenceFlowConnector
		{
			width 2
			type dot
			color black

		}
		source decoration none
		target decoration none
		source reference <- sourceC
		target reference  <- targetC
	}



	}
	Rules definition {
		Rules for class StartEvent {
			case
			"element.getEventType()== null || element.getEventType().equals(\"\") "
			use StartEventDefOriginal
			case
			"element.getEventType()!= null && element.getEventType().equals(\"Message\")"
			use StartEventMessageDef
			case
			"element.getEventType()!= null && element.getEventType().equals(\"Signal\")"
			use StartEventSignalDef
			case
			"element.getEventType()!= null && element.getEventType().equals(\"Conditional\")"
			use StartEventConditionalDef
			case
			"element.getEventType()!= null && element.getEventType().equals(\"Parallel\")"
			use StartEventParallelDef
			case
			"element.getEventType()!= null && element.getEventType().equals(\"Multiple\")"
			use StartEventMultipleDef
		}
		Rules for class IntermediateEvent {
			case
			"element.getEventType()!= null && element.getEventType().equals(\"Timer\")"
			use IntermediateEventTimmerDef
			case
			"element.getEventType()!= null && element.getEventType().equals(\"Message\")"
			use IntermediateEventMessageDef
			case
			"element.getEventType()!= null && element.getEventType().equals(\"Signal\")"
			use IntermediateEventSignalDef
			case
			"element.getEventType()!= null && element.getEventType().equals(\"Link\")"
			use IntermediateEventLinkDef
			case
			"element.getEventType()!= null && element.getEventType().equals(\"Compensate\")"
			use IntermediateEventCompensateDef
			case
			"element.getEventType()!= null && element.getEventType().equals(\"Escalation\")"
			use IntermediateEventEscalationDef
			case
			"element.getEventType()!= null && element.getEventType().equals(\"Conditional\")"
			use IntermediateEventConditionalDef
			case
			"element.getEventType()!= null && element.getEventType().equals(\"Parallel\")"
			use IntermediateEventParallelDef
			case
			"element.getEventType()!= null && element.getEventType().equals(\"Multiple\")"
			use IntermediateEventMultipleDef
		}
		Rules for class EndEvent {
			case
			"element.getEventType()!= null && element.getEventType().equals(\"Terminate\")"
			use EndEventTerminalDef
			case
			"element.getEventType()!= null && element.getEventType().equals(\"Message\")"
			use EndEventMessageDef
			case
			"element.getEventType()!= null && element.getEventType().equals(\"Signal\")"
			use EndEventSignalDef
			case
			"element.getEventType()!= null && element.getEventType().equals(\"Compensate\")"
			use EndEventCompensateDef
			case
			"element.getEventType()!= null && element.getEventType().equals(\"Escalation\")"
			use EndEventEscalationDef
			case
			"element.getEventType()!= null && element.getEventType().equals(\"Error\")"
			use EndEventErrorDef
			case
			"element.getEventType()!= null && element.getEventType().equals(\"Cancel\")"
			use EndEventCancelDef
			case
			"element.getEventType()!= null && element.getEventType().equals(\"Multiple\")"
			use EndEventMultipleDef
		}
		Rules for class Gateway {
			case "element.getType()!= null && element.getType().equals(\"Parallel\")"
			use GatewayParallelDef
			case "element.getType()!= null && element.getType().equals(\"Inclusive\")"
			use GatewayInclusiveDef
			case "element.getType()!= null && element.getType().equals(\"Event Base\")"
			use GatewayEventBaseDef
			case
			"element.getType()!= null && element.getType().equals(\"Exclusive Event Base\")"
			use GatewayExEventBaseDef
			case
			"element.getType()!= null && element.getType().equals(\"Parallel Event Base\")"
			use GatewayParallelEventBaseDef
			case "element.getType()!= null && element.getType().equals(\"Complex\")"
			use GatewayComplexDef
		}
	}
	Interaction definition {
		Interaction elements {
		}
		Statements {
		}
	}
}
